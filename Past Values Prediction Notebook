{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMUmtXG8uFf3Lt1gWTnt9cU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mdolphin123/FlagApp/blob/master/Past%20Values%20Prediction%20Notebook\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pebeyCnZOp5X"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import sklearn\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/sample_data/redfin_data.csv')\n",
        "df.head(5)\n",
        "\n",
        "\n",
        "df = df.drop(['LOCATION', '$/SQUARE FEET', 'DAYS ON MARKET', 'HOA/MONTH', 'SALE TYPE', 'ADDRESS', 'CITY', 'STATE OR PROVINCE', 'NEXT OPEN HOUSE START TIME', 'URL (SEE https://www.redfin.com/buy-a-home/comparative-market-analysis FOR INFO ON PRICING)', 'SOURCE', 'MLS#', 'FAVORITE', 'INTERESTED', 'STATUS', 'NEXT OPEN HOUSE END TIME'], axis = 1)\n",
        "\n",
        "#Reduce outliers in pricing\n",
        "df = df[(df['PRICE'] > 100000) & (df['PRICE'] < 1750000)]\n",
        "df = df.dropna(subset = ['PROPERTY TYPE', 'YEAR BUILT', 'SOLD DATE', 'BEDS', 'BATHS', 'LOT SIZE', 'SQUARE FEET'])\n",
        "df = df[(df['PROPERTY TYPE'] != \"Other\") & (df['PROPERTY TYPE'] != \"Unknown\")]\n",
        "\n",
        "df.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "pK0QjA5wD43k",
        "outputId": "88b22b53-8d83-473d-95b4-5faed07d9b26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         SOLD DATE              PROPERTY TYPE  ZIP OR POSTAL CODE     PRICE  \\\n",
              "0      May-16-2022  Single Family Residential             27712.0  335000.0   \n",
              "1  October-16-2024  Single Family Residential             27703.0  345000.0   \n",
              "2  October-14-2020  Single Family Residential             27704.0  305000.0   \n",
              "3   August-14-2023  Single Family Residential             27712.0  775000.0   \n",
              "7   August-16-2023  Single Family Residential             27703.0  565000.0   \n",
              "\n",
              "   BEDS  BATHS  SQUARE FEET  LOT SIZE  YEAR BUILT   LATITUDE  LONGITUDE  \n",
              "0   3.0    2.0       1253.0   20908.0      1971.0  36.095285 -78.924515  \n",
              "1   3.0    2.0       1254.0    7405.0      1952.0  35.981397 -78.871075  \n",
              "2   2.0    1.0       1400.0  277172.0      1907.0  36.047598 -78.870691  \n",
              "3   4.0    3.5       2800.0   83199.0      2001.0  36.063933 -78.981481  \n",
              "7   4.0    2.5       2763.0   11325.0      2006.0  35.950413 -78.823744  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9b2dfd40-2532-4c2f-82e4-986c5ed7de7b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SOLD DATE</th>\n",
              "      <th>PROPERTY TYPE</th>\n",
              "      <th>ZIP OR POSTAL CODE</th>\n",
              "      <th>PRICE</th>\n",
              "      <th>BEDS</th>\n",
              "      <th>BATHS</th>\n",
              "      <th>SQUARE FEET</th>\n",
              "      <th>LOT SIZE</th>\n",
              "      <th>YEAR BUILT</th>\n",
              "      <th>LATITUDE</th>\n",
              "      <th>LONGITUDE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>May-16-2022</td>\n",
              "      <td>Single Family Residential</td>\n",
              "      <td>27712.0</td>\n",
              "      <td>335000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1253.0</td>\n",
              "      <td>20908.0</td>\n",
              "      <td>1971.0</td>\n",
              "      <td>36.095285</td>\n",
              "      <td>-78.924515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>October-16-2024</td>\n",
              "      <td>Single Family Residential</td>\n",
              "      <td>27703.0</td>\n",
              "      <td>345000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1254.0</td>\n",
              "      <td>7405.0</td>\n",
              "      <td>1952.0</td>\n",
              "      <td>35.981397</td>\n",
              "      <td>-78.871075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>October-14-2020</td>\n",
              "      <td>Single Family Residential</td>\n",
              "      <td>27704.0</td>\n",
              "      <td>305000.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1400.0</td>\n",
              "      <td>277172.0</td>\n",
              "      <td>1907.0</td>\n",
              "      <td>36.047598</td>\n",
              "      <td>-78.870691</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>August-14-2023</td>\n",
              "      <td>Single Family Residential</td>\n",
              "      <td>27712.0</td>\n",
              "      <td>775000.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>2800.0</td>\n",
              "      <td>83199.0</td>\n",
              "      <td>2001.0</td>\n",
              "      <td>36.063933</td>\n",
              "      <td>-78.981481</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>August-16-2023</td>\n",
              "      <td>Single Family Residential</td>\n",
              "      <td>27703.0</td>\n",
              "      <td>565000.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2763.0</td>\n",
              "      <td>11325.0</td>\n",
              "      <td>2006.0</td>\n",
              "      <td>35.950413</td>\n",
              "      <td>-78.823744</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b2dfd40-2532-4c2f-82e4-986c5ed7de7b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9b2dfd40-2532-4c2f-82e4-986c5ed7de7b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9b2dfd40-2532-4c2f-82e4-986c5ed7de7b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5e1c3494-4c7e-4fa7-bd48-df4e21511d22\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e1c3494-4c7e-4fa7-bd48-df4e21511d22')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5e1c3494-4c7e-4fa7-bd48-df4e21511d22 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 17939,\n  \"fields\": [\n    {\n      \"column\": \"SOLD DATE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1302,\n        \"samples\": [\n          \"October-3-2022\",\n          \"July-20-2023\",\n          \"February-28-2022\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROPERTY TYPE\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Single Family Residential\",\n          \"Townhouse\",\n          \"Ranch\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ZIP OR POSTAL CODE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 120.28858239848914,\n        \"min\": 17704.0,\n        \"max\": 37704.0,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          27714.0,\n          27709.0,\n          27514.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PRICE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 176427.44690143847,\n        \"min\": 101000.0,\n        \"max\": 1720410.0,\n        \"num_unique_values\": 4286,\n        \"samples\": [\n          101500.0,\n          750000.0,\n          407034.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BEDS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.774616858558127,\n        \"min\": 1.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          8.0,\n          2.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BATHS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7143073667804396,\n        \"min\": 0.5,\n        \"max\": 21.5,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          5.5,\n          6.5,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SQUARE FEET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 739.7649010056798,\n        \"min\": 1.0,\n        \"max\": 10129.0,\n        \"num_unique_values\": 3073,\n        \"samples\": [\n          4975.0,\n          2205.0,\n          905.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LOT SIZE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1113109.7600625902,\n        \"min\": 8.0,\n        \"max\": 105371640.0,\n        \"num_unique_values\": 1358,\n        \"samples\": [\n          27442.0,\n          138912.0,\n          4521.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YEAR BUILT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.727115516082723,\n        \"min\": 1577.0,\n        \"max\": 2025.0,\n        \"num_unique_values\": 128,\n        \"samples\": [\n          1960.0,\n          1986.0,\n          1999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LATITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05570091190462301,\n        \"min\": 35.8440869,\n        \"max\": 36.1950491,\n        \"num_unique_values\": 16230,\n        \"samples\": [\n          35.947203,\n          35.9583816,\n          35.9408235\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LONGITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05960134500040858,\n        \"min\": -79.0438321,\n        \"max\": -78.746702,\n        \"num_unique_values\": 15792,\n        \"samples\": [\n          -78.9617545,\n          -78.9497769,\n          -78.9714903\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Cleaning Data\n",
        "\n",
        "#Dropping the ones that don't matter\n",
        "df = df.drop(['$/SQUARE FEET', 'DAYS ON MARKET', 'HOA/MONTH', 'SALE TYPE', 'ADDRESS', 'CITY', 'STATE OR PROVINCE', 'NEXT OPEN HOUSE START TIME', 'URL (SEE https://www.redfin.com/buy-a-home/comparative-market-analysis FOR INFO ON PRICING)', 'SOURCE', 'MLS#', 'FAVORITE', 'INTERESTED', 'STATUS', 'NEXT OPEN HOUSE END TIME'], axis = 1)\n",
        "\n",
        "#Reduce outliers in pricing\n",
        "df = df[(df['PRICE'] > 100000) & (df['PRICE'] < 1750000)]\n",
        "df = df.dropna(subset = ['PROPERTY TYPE', 'YEAR BUILT', 'SOLD DATE', 'BEDS', 'BATHS', 'LOT SIZE', 'SQUARE FEET'])\n",
        "df = df[(df['PROPERTY TYPE'] != \"Other\") & (df['PROPERTY TYPE'] != \"Unknown\")]\n",
        "print(df.shape)\n",
        "\n",
        "#dealing with zipcodes/location, convert zipcodes to property and violent crime\n",
        "vc = {27712: 29.4, 27703: 49.7, 27701: 70.2, 27707: 53.5, 27713: 39.5, 27704: 61.4, 27705: 47.4, 27503: 36.9, 27709: 23.4, 27278: 30.3}\n",
        "pc = {27712: 40.8, 27703: 64.4, 27701: 78.2, 27707: 67.8, 27713: 58.3, 27704: 72.4, 27705: 63.7, 27503: 46.2, 27709: 31.9, 27278: 40}\n",
        "#Making sure to only use Durham Zipcodes\n",
        "df = df[(df['ZIP OR POSTAL CODE'] == 27703) | (df['ZIP OR POSTAL CODE'] == 27713) | (df['ZIP OR POSTAL CODE'] == 27707) | (df['ZIP OR POSTAL CODE'] == 27705) | (df['ZIP OR POSTAL CODE'] == 27704) | (df['ZIP OR POSTAL CODE'] == 27701) | (df['ZIP OR POSTAL CODE'] == 27712) | (df['ZIP OR POSTAL CODE'] == 27503)]\n",
        "df = pd.get_dummies(df, columns = ['PROPERTY TYPE'], dtype = 'int')\n",
        "\n",
        "df['PROPERTY_CRIME'] = df['ZIP OR POSTAL CODE'].map(pc)\n",
        "df['VIOLENT_CRIME'] = df['ZIP OR POSTAL CODE'].map(vc)\n",
        "\n",
        "print(df['ZIP OR POSTAL CODE'].unique())\n",
        "\n",
        "print(df.shape)\n",
        "df = df.drop(['ZIP OR POSTAL CODE', 'LOCATION'], axis = 1)\n",
        "\n",
        "\n",
        "#print(df.shape)\n",
        "\n",
        "\n",
        "#for testing\n",
        "#df = df.drop(['SOLD DATE'], axis = 1)\n",
        "df.head(10)"
      ],
      "metadata": {
        "id": "TuPK3PzsO7yr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "outputId": "c3a07f42-a0f6-4e22-8bba-d04887c1835f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "\"['$/SQUARE FEET', 'DAYS ON MARKET', 'HOA/MONTH', 'SALE TYPE', 'ADDRESS', 'CITY', 'STATE OR PROVINCE', 'NEXT OPEN HOUSE START TIME', 'URL (SEE https://www.redfin.com/buy-a-home/comparative-market-analysis FOR INFO ON PRICING)', 'SOURCE', 'MLS#', 'FAVORITE', 'INTERESTED', 'STATUS', 'NEXT OPEN HOUSE END TIME'] not found in axis\"",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-06bd32e0107e>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#Dropping the ones that don't matter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'$/SQUARE FEET'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'DAYS ON MARKET'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'HOA/MONTH'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SALE TYPE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ADDRESS'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CITY'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'STATE OR PROVINCE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'NEXT OPEN HOUSE START TIME'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'URL (SEE https://www.redfin.com/buy-a-home/comparative-market-analysis FOR INFO ON PRICING)'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SOURCE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MLS#'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'FAVORITE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'INTERESTED'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'STATUS'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'NEXT OPEN HOUSE END TIME'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m#Reduce outliers in pricing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5579\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5580\u001b[0m         \"\"\"\n\u001b[0;32m-> 5581\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5582\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5583\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4787\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4788\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4789\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4790\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4829\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4830\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4831\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4832\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7069\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7070\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask].tolist()} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7071\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7072\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"['$/SQUARE FEET', 'DAYS ON MARKET', 'HOA/MONTH', 'SALE TYPE', 'ADDRESS', 'CITY', 'STATE OR PROVINCE', 'NEXT OPEN HOUSE START TIME', 'URL (SEE https://www.redfin.com/buy-a-home/comparative-market-analysis FOR INFO ON PRICING)', 'SOURCE', 'MLS#', 'FAVORITE', 'INTERESTED', 'STATUS', 'NEXT OPEN HOUSE END TIME'] not found in axis\""
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Dealing with Time Trend**"
      ],
      "metadata": {
        "id": "CJY-f4nu2vsV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['SOLD DATE'] = df['SOLD DATE'].astype('datetime64[ns]')\n",
        "df['YEAR'] = df['SOLD DATE'].dt.year\n",
        "df['MONTH'] = df['SOLD DATE'].dt.month\n",
        "\n",
        "\n",
        "#df = pd.get_dummies(df, columns = ['YEAR'])\n",
        "df = df.drop(columns = ['SOLD DATE'])\n",
        "\n",
        "#more feature engineering\n",
        "df['HOUSE AGE'] = df['YEAR'] - df['YEAR BUILT']\n",
        "\n",
        "df = df.reset_index(drop=True)\n",
        "\n",
        "df.head(30)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "iDG-sYsAXy5D",
        "outputId": "cfd59eb9-171b-4167-8147-01a249e95ffc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       PRICE  BEDS  BATHS  SQUARE FEET  LOT SIZE  YEAR BUILT   LATITUDE  \\\n",
              "0   335000.0   3.0    2.0       1253.0   20908.0      1971.0  36.095285   \n",
              "1   345000.0   3.0    2.0       1254.0    7405.0      1952.0  35.981397   \n",
              "2   305000.0   2.0    1.0       1400.0  277172.0      1907.0  36.047598   \n",
              "3   775000.0   4.0    3.5       2800.0   83199.0      2001.0  36.063933   \n",
              "4   565000.0   4.0    2.5       2763.0   11325.0      2006.0  35.950413   \n",
              "5   257000.0   3.0    2.0       1620.0   27355.0      1964.0  36.011727   \n",
              "6   460000.0   4.0    3.0       2403.0    5227.0      2016.0  35.963565   \n",
              "7   250000.0   3.0    2.0       1795.0  137649.0      1968.0  36.074663   \n",
              "8   375000.0   3.0    2.5       1595.0    4748.0      2003.0  35.914101   \n",
              "9   335000.0   3.0    2.5       1490.0   11360.0      2024.0  35.987164   \n",
              "10  775000.0   6.0    5.0       6386.0   38332.0      2004.0  36.037849   \n",
              "11  326500.0   3.0    2.5       1740.0   10018.0      2005.0  35.929840   \n",
              "12  549990.0   3.0    2.5       2206.0    7840.0      2022.0  35.927236   \n",
              "13  178500.0   3.0    2.5       1560.0    1611.0      2012.0  36.060304   \n",
              "14  311705.0   2.0    2.0       1551.0    6098.0      2020.0  35.943497   \n",
              "15  349000.0   2.0    2.5       1571.0    1409.0      2024.0  35.962105   \n",
              "16  300000.0   3.0    2.0       1128.0   13068.0      1989.0  35.989668   \n",
              "17  430000.0   3.0    2.5       1633.0   10018.0      1984.0  36.044454   \n",
              "18  501300.0   4.0    2.5       2541.0   13068.0      2021.0  36.091828   \n",
              "19  440000.0   2.0    1.0       1107.0   10890.0      1936.0  36.020189   \n",
              "20  295100.0   3.0    2.0       1324.0   16552.0      1999.0  35.999124   \n",
              "21  415750.0   2.0    3.0       1536.0    1306.0      2007.0  35.883430   \n",
              "22  460000.0   3.0    2.0       1842.0   19602.0      2000.0  36.088169   \n",
              "23  310000.0   2.0    2.5       1402.0    1437.0      1985.0  35.974158   \n",
              "24  404990.0   3.0    2.5       1924.0    4791.0      2023.0  35.953893   \n",
              "25  831000.0   4.0    3.0       2545.0   22651.0      1955.0  35.979647   \n",
              "26  211300.0   3.0    1.5       1250.0    1524.0      1985.0  35.984712   \n",
              "27  423000.0   3.0    2.5       1924.0    5662.0      2024.0  35.970567   \n",
              "28  377533.0   3.0    3.5       1858.0    1568.0      2021.0  35.942032   \n",
              "29  350000.0   3.0    2.5       2412.0    6403.0      2012.0  35.959610   \n",
              "\n",
              "    LONGITUDE  PROPERTY TYPE_Condo/Co-op  \\\n",
              "0  -78.924515                          0   \n",
              "1  -78.871075                          0   \n",
              "2  -78.870691                          0   \n",
              "3  -78.981481                          0   \n",
              "4  -78.823744                          0   \n",
              "5  -78.851911                          0   \n",
              "6  -78.829422                          0   \n",
              "7  -78.872632                          0   \n",
              "8  -78.911740                          0   \n",
              "9  -78.868557                          0   \n",
              "10 -78.955223                          0   \n",
              "11 -78.900849                          0   \n",
              "12 -78.765478                          0   \n",
              "13 -78.871507                          0   \n",
              "14 -78.791249                          0   \n",
              "15 -78.810689                          0   \n",
              "16 -78.806346                          0   \n",
              "17 -78.922941                          0   \n",
              "18 -78.921603                          0   \n",
              "19 -78.917505                          0   \n",
              "20 -78.808743                          0   \n",
              "21 -78.865058                          0   \n",
              "22 -78.883685                          0   \n",
              "23 -78.964433                          0   \n",
              "24 -78.853612                          0   \n",
              "25 -78.941486                          0   \n",
              "26 -78.908610                          0   \n",
              "27 -78.829345                          0   \n",
              "28 -78.913856                          0   \n",
              "29 -78.824965                          0   \n",
              "\n",
              "    PROPERTY TYPE_Mobile/Manufactured Home  \\\n",
              "0                                        0   \n",
              "1                                        0   \n",
              "2                                        0   \n",
              "3                                        0   \n",
              "4                                        0   \n",
              "5                                        0   \n",
              "6                                        0   \n",
              "7                                        0   \n",
              "8                                        0   \n",
              "9                                        0   \n",
              "10                                       0   \n",
              "11                                       0   \n",
              "12                                       0   \n",
              "13                                       0   \n",
              "14                                       0   \n",
              "15                                       0   \n",
              "16                                       0   \n",
              "17                                       0   \n",
              "18                                       0   \n",
              "19                                       0   \n",
              "20                                       0   \n",
              "21                                       0   \n",
              "22                                       0   \n",
              "23                                       0   \n",
              "24                                       0   \n",
              "25                                       0   \n",
              "26                                       0   \n",
              "27                                       0   \n",
              "28                                       0   \n",
              "29                                       0   \n",
              "\n",
              "    PROPERTY TYPE_Multi-Family (2-4 Unit)  \\\n",
              "0                                       0   \n",
              "1                                       0   \n",
              "2                                       0   \n",
              "3                                       0   \n",
              "4                                       0   \n",
              "5                                       0   \n",
              "6                                       0   \n",
              "7                                       0   \n",
              "8                                       0   \n",
              "9                                       0   \n",
              "10                                      0   \n",
              "11                                      0   \n",
              "12                                      0   \n",
              "13                                      0   \n",
              "14                                      0   \n",
              "15                                      0   \n",
              "16                                      0   \n",
              "17                                      0   \n",
              "18                                      0   \n",
              "19                                      0   \n",
              "20                                      0   \n",
              "21                                      0   \n",
              "22                                      0   \n",
              "23                                      0   \n",
              "24                                      0   \n",
              "25                                      0   \n",
              "26                                      0   \n",
              "27                                      0   \n",
              "28                                      0   \n",
              "29                                      0   \n",
              "\n",
              "    PROPERTY TYPE_Multi-Family (5+ Unit)  PROPERTY TYPE_Ranch  \\\n",
              "0                                      0                    0   \n",
              "1                                      0                    0   \n",
              "2                                      0                    0   \n",
              "3                                      0                    0   \n",
              "4                                      0                    0   \n",
              "5                                      0                    0   \n",
              "6                                      0                    0   \n",
              "7                                      0                    0   \n",
              "8                                      0                    0   \n",
              "9                                      0                    0   \n",
              "10                                     0                    0   \n",
              "11                                     0                    0   \n",
              "12                                     0                    0   \n",
              "13                                     0                    0   \n",
              "14                                     0                    0   \n",
              "15                                     0                    0   \n",
              "16                                     0                    0   \n",
              "17                                     0                    0   \n",
              "18                                     0                    0   \n",
              "19                                     0                    0   \n",
              "20                                     0                    0   \n",
              "21                                     0                    0   \n",
              "22                                     0                    0   \n",
              "23                                     0                    0   \n",
              "24                                     0                    0   \n",
              "25                                     0                    0   \n",
              "26                                     0                    0   \n",
              "27                                     0                    0   \n",
              "28                                     0                    0   \n",
              "29                                     0                    0   \n",
              "\n",
              "    PROPERTY TYPE_Single Family Residential  PROPERTY TYPE_Townhouse  \\\n",
              "0                                         1                        0   \n",
              "1                                         1                        0   \n",
              "2                                         1                        0   \n",
              "3                                         1                        0   \n",
              "4                                         1                        0   \n",
              "5                                         1                        0   \n",
              "6                                         1                        0   \n",
              "7                                         1                        0   \n",
              "8                                         1                        0   \n",
              "9                                         1                        0   \n",
              "10                                        1                        0   \n",
              "11                                        1                        0   \n",
              "12                                        1                        0   \n",
              "13                                        0                        1   \n",
              "14                                        1                        0   \n",
              "15                                        0                        1   \n",
              "16                                        1                        0   \n",
              "17                                        1                        0   \n",
              "18                                        1                        0   \n",
              "19                                        1                        0   \n",
              "20                                        1                        0   \n",
              "21                                        0                        1   \n",
              "22                                        1                        0   \n",
              "23                                        0                        1   \n",
              "24                                        0                        1   \n",
              "25                                        1                        0   \n",
              "26                                        0                        1   \n",
              "27                                        1                        0   \n",
              "28                                        0                        1   \n",
              "29                                        1                        0   \n",
              "\n",
              "    PROPERTY_CRIME  VIOLENT_CRIME  YEAR  MONTH  HOUSE AGE  \n",
              "0             40.8           29.4  2022      5       51.0  \n",
              "1             64.4           49.7  2024     10       72.0  \n",
              "2             72.4           61.4  2020     10      113.0  \n",
              "3             40.8           29.4  2023      8       22.0  \n",
              "4             64.4           49.7  2023      8       17.0  \n",
              "5             72.4           61.4  2020      6       56.0  \n",
              "6             64.4           49.7  2023      4        7.0  \n",
              "7             72.4           61.4  2020      7       52.0  \n",
              "8             58.3           39.5  2022     10       19.0  \n",
              "9             64.4           49.7  2024      8        0.0  \n",
              "10            63.7           47.4  2021      5       17.0  \n",
              "11            58.3           39.5  2020     11       15.0  \n",
              "12            64.4           49.7  2022      3        0.0  \n",
              "13            72.4           61.4  2020      8        8.0  \n",
              "14            64.4           49.7  2021      2        1.0  \n",
              "15            64.4           49.7  2024      8        0.0  \n",
              "16            64.4           49.7  2022      5       33.0  \n",
              "17            63.7           47.4  2022      3       38.0  \n",
              "18            40.8           29.4  2021     12        0.0  \n",
              "19            63.7           47.4  2022      6       86.0  \n",
              "20            64.4           49.7  2022      1       23.0  \n",
              "21            64.4           49.7  2024     10       17.0  \n",
              "22            40.8           29.4  2024      5       24.0  \n",
              "23            63.7           47.4  2023      5       38.0  \n",
              "24            64.4           49.7  2024      1        1.0  \n",
              "25            67.8           53.5  2023     11       68.0  \n",
              "26            67.8           53.5  2023     11       38.0  \n",
              "27            64.4           49.7  2025      2        1.0  \n",
              "28            58.3           39.5  2021     11        0.0  \n",
              "29            64.4           49.7  2021      5        9.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0cca5815-8c7d-47fe-81ad-9ad343554937\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PRICE</th>\n",
              "      <th>BEDS</th>\n",
              "      <th>BATHS</th>\n",
              "      <th>SQUARE FEET</th>\n",
              "      <th>LOT SIZE</th>\n",
              "      <th>YEAR BUILT</th>\n",
              "      <th>LATITUDE</th>\n",
              "      <th>LONGITUDE</th>\n",
              "      <th>PROPERTY TYPE_Condo/Co-op</th>\n",
              "      <th>PROPERTY TYPE_Mobile/Manufactured Home</th>\n",
              "      <th>PROPERTY TYPE_Multi-Family (2-4 Unit)</th>\n",
              "      <th>PROPERTY TYPE_Multi-Family (5+ Unit)</th>\n",
              "      <th>PROPERTY TYPE_Ranch</th>\n",
              "      <th>PROPERTY TYPE_Single Family Residential</th>\n",
              "      <th>PROPERTY TYPE_Townhouse</th>\n",
              "      <th>PROPERTY_CRIME</th>\n",
              "      <th>VIOLENT_CRIME</th>\n",
              "      <th>YEAR</th>\n",
              "      <th>MONTH</th>\n",
              "      <th>HOUSE AGE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>335000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1253.0</td>\n",
              "      <td>20908.0</td>\n",
              "      <td>1971.0</td>\n",
              "      <td>36.095285</td>\n",
              "      <td>-78.924515</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>40.8</td>\n",
              "      <td>29.4</td>\n",
              "      <td>2022</td>\n",
              "      <td>5</td>\n",
              "      <td>51.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>345000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1254.0</td>\n",
              "      <td>7405.0</td>\n",
              "      <td>1952.0</td>\n",
              "      <td>35.981397</td>\n",
              "      <td>-78.871075</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2024</td>\n",
              "      <td>10</td>\n",
              "      <td>72.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>305000.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1400.0</td>\n",
              "      <td>277172.0</td>\n",
              "      <td>1907.0</td>\n",
              "      <td>36.047598</td>\n",
              "      <td>-78.870691</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>72.4</td>\n",
              "      <td>61.4</td>\n",
              "      <td>2020</td>\n",
              "      <td>10</td>\n",
              "      <td>113.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>775000.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>2800.0</td>\n",
              "      <td>83199.0</td>\n",
              "      <td>2001.0</td>\n",
              "      <td>36.063933</td>\n",
              "      <td>-78.981481</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>40.8</td>\n",
              "      <td>29.4</td>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>565000.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2763.0</td>\n",
              "      <td>11325.0</td>\n",
              "      <td>2006.0</td>\n",
              "      <td>35.950413</td>\n",
              "      <td>-78.823744</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>17.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>257000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1620.0</td>\n",
              "      <td>27355.0</td>\n",
              "      <td>1964.0</td>\n",
              "      <td>36.011727</td>\n",
              "      <td>-78.851911</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>72.4</td>\n",
              "      <td>61.4</td>\n",
              "      <td>2020</td>\n",
              "      <td>6</td>\n",
              "      <td>56.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>460000.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2403.0</td>\n",
              "      <td>5227.0</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>35.963565</td>\n",
              "      <td>-78.829422</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2023</td>\n",
              "      <td>4</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>250000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1795.0</td>\n",
              "      <td>137649.0</td>\n",
              "      <td>1968.0</td>\n",
              "      <td>36.074663</td>\n",
              "      <td>-78.872632</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>72.4</td>\n",
              "      <td>61.4</td>\n",
              "      <td>2020</td>\n",
              "      <td>7</td>\n",
              "      <td>52.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>375000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1595.0</td>\n",
              "      <td>4748.0</td>\n",
              "      <td>2003.0</td>\n",
              "      <td>35.914101</td>\n",
              "      <td>-78.911740</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>58.3</td>\n",
              "      <td>39.5</td>\n",
              "      <td>2022</td>\n",
              "      <td>10</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>335000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1490.0</td>\n",
              "      <td>11360.0</td>\n",
              "      <td>2024.0</td>\n",
              "      <td>35.987164</td>\n",
              "      <td>-78.868557</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2024</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>775000.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6386.0</td>\n",
              "      <td>38332.0</td>\n",
              "      <td>2004.0</td>\n",
              "      <td>36.037849</td>\n",
              "      <td>-78.955223</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>63.7</td>\n",
              "      <td>47.4</td>\n",
              "      <td>2021</td>\n",
              "      <td>5</td>\n",
              "      <td>17.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>326500.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1740.0</td>\n",
              "      <td>10018.0</td>\n",
              "      <td>2005.0</td>\n",
              "      <td>35.929840</td>\n",
              "      <td>-78.900849</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>58.3</td>\n",
              "      <td>39.5</td>\n",
              "      <td>2020</td>\n",
              "      <td>11</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>549990.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2206.0</td>\n",
              "      <td>7840.0</td>\n",
              "      <td>2022.0</td>\n",
              "      <td>35.927236</td>\n",
              "      <td>-78.765478</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2022</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>178500.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1560.0</td>\n",
              "      <td>1611.0</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>36.060304</td>\n",
              "      <td>-78.871507</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>72.4</td>\n",
              "      <td>61.4</td>\n",
              "      <td>2020</td>\n",
              "      <td>8</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>311705.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1551.0</td>\n",
              "      <td>6098.0</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>35.943497</td>\n",
              "      <td>-78.791249</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2021</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>349000.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1571.0</td>\n",
              "      <td>1409.0</td>\n",
              "      <td>2024.0</td>\n",
              "      <td>35.962105</td>\n",
              "      <td>-78.810689</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2024</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>300000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1128.0</td>\n",
              "      <td>13068.0</td>\n",
              "      <td>1989.0</td>\n",
              "      <td>35.989668</td>\n",
              "      <td>-78.806346</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2022</td>\n",
              "      <td>5</td>\n",
              "      <td>33.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>430000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1633.0</td>\n",
              "      <td>10018.0</td>\n",
              "      <td>1984.0</td>\n",
              "      <td>36.044454</td>\n",
              "      <td>-78.922941</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>63.7</td>\n",
              "      <td>47.4</td>\n",
              "      <td>2022</td>\n",
              "      <td>3</td>\n",
              "      <td>38.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>501300.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2541.0</td>\n",
              "      <td>13068.0</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>36.091828</td>\n",
              "      <td>-78.921603</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>40.8</td>\n",
              "      <td>29.4</td>\n",
              "      <td>2021</td>\n",
              "      <td>12</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>440000.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1107.0</td>\n",
              "      <td>10890.0</td>\n",
              "      <td>1936.0</td>\n",
              "      <td>36.020189</td>\n",
              "      <td>-78.917505</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>63.7</td>\n",
              "      <td>47.4</td>\n",
              "      <td>2022</td>\n",
              "      <td>6</td>\n",
              "      <td>86.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>295100.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1324.0</td>\n",
              "      <td>16552.0</td>\n",
              "      <td>1999.0</td>\n",
              "      <td>35.999124</td>\n",
              "      <td>-78.808743</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2022</td>\n",
              "      <td>1</td>\n",
              "      <td>23.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>415750.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1536.0</td>\n",
              "      <td>1306.0</td>\n",
              "      <td>2007.0</td>\n",
              "      <td>35.883430</td>\n",
              "      <td>-78.865058</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2024</td>\n",
              "      <td>10</td>\n",
              "      <td>17.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>460000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1842.0</td>\n",
              "      <td>19602.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>36.088169</td>\n",
              "      <td>-78.883685</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>40.8</td>\n",
              "      <td>29.4</td>\n",
              "      <td>2024</td>\n",
              "      <td>5</td>\n",
              "      <td>24.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>310000.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1402.0</td>\n",
              "      <td>1437.0</td>\n",
              "      <td>1985.0</td>\n",
              "      <td>35.974158</td>\n",
              "      <td>-78.964433</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>63.7</td>\n",
              "      <td>47.4</td>\n",
              "      <td>2023</td>\n",
              "      <td>5</td>\n",
              "      <td>38.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>404990.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1924.0</td>\n",
              "      <td>4791.0</td>\n",
              "      <td>2023.0</td>\n",
              "      <td>35.953893</td>\n",
              "      <td>-78.853612</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2024</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>831000.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2545.0</td>\n",
              "      <td>22651.0</td>\n",
              "      <td>1955.0</td>\n",
              "      <td>35.979647</td>\n",
              "      <td>-78.941486</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>67.8</td>\n",
              "      <td>53.5</td>\n",
              "      <td>2023</td>\n",
              "      <td>11</td>\n",
              "      <td>68.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>211300.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.5</td>\n",
              "      <td>1250.0</td>\n",
              "      <td>1524.0</td>\n",
              "      <td>1985.0</td>\n",
              "      <td>35.984712</td>\n",
              "      <td>-78.908610</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>67.8</td>\n",
              "      <td>53.5</td>\n",
              "      <td>2023</td>\n",
              "      <td>11</td>\n",
              "      <td>38.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>423000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1924.0</td>\n",
              "      <td>5662.0</td>\n",
              "      <td>2024.0</td>\n",
              "      <td>35.970567</td>\n",
              "      <td>-78.829345</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2025</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>377533.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1858.0</td>\n",
              "      <td>1568.0</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>35.942032</td>\n",
              "      <td>-78.913856</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>58.3</td>\n",
              "      <td>39.5</td>\n",
              "      <td>2021</td>\n",
              "      <td>11</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>350000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2412.0</td>\n",
              "      <td>6403.0</td>\n",
              "      <td>2012.0</td>\n",
              "      <td>35.959610</td>\n",
              "      <td>-78.824965</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2021</td>\n",
              "      <td>5</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0cca5815-8c7d-47fe-81ad-9ad343554937')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0cca5815-8c7d-47fe-81ad-9ad343554937 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0cca5815-8c7d-47fe-81ad-9ad343554937');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-11db7dfe-bf50-4b9c-9a88-5dcae6868d83\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-11db7dfe-bf50-4b9c-9a88-5dcae6868d83')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-11db7dfe-bf50-4b9c-9a88-5dcae6868d83 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 17888,\n  \"fields\": [\n    {\n      \"column\": \"PRICE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 176113.2478734299,\n        \"min\": 101000.0,\n        \"max\": 1720410.0,\n        \"num_unique_values\": 4278,\n        \"samples\": [\n          472500.0,\n          427000.0,\n          279750.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BEDS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.773683821119867,\n        \"min\": 1.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          8.0,\n          2.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BATHS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7129087679926847,\n        \"min\": 0.5,\n        \"max\": 21.5,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          5.5,\n          6.5,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SQUARE FEET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 737.8761487302964,\n        \"min\": 1.0,\n        \"max\": 10129.0,\n        \"num_unique_values\": 3063,\n        \"samples\": [\n          3313.0,\n          2633.0,\n          3287.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LOT SIZE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1114686.3356845991,\n        \"min\": 8.0,\n        \"max\": 105371640.0,\n        \"num_unique_values\": 1350,\n        \"samples\": [\n          3746.0,\n          42035.0,\n          39988.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YEAR BUILT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.737802289625904,\n        \"min\": 1577.0,\n        \"max\": 2025.0,\n        \"num_unique_values\": 128,\n        \"samples\": [\n          1960.0,\n          1986.0,\n          1999.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LATITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.055594494029466375,\n        \"min\": 35.8440869,\n        \"max\": 36.1909973,\n        \"num_unique_values\": 16183,\n        \"samples\": [\n          35.9945182,\n          36.1226201,\n          35.9526557\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LONGITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.059506924512526926,\n        \"min\": -79.0438321,\n        \"max\": -78.746702,\n        \"num_unique_values\": 15745,\n        \"samples\": [\n          -78.7925238,\n          -78.8088077,\n          -78.918262\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROPERTY TYPE_Condo/Co-op\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROPERTY TYPE_Mobile/Manufactured Home\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROPERTY TYPE_Multi-Family (2-4 Unit)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROPERTY TYPE_Multi-Family (5+ Unit)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROPERTY TYPE_Ranch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROPERTY TYPE_Single Family Residential\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROPERTY TYPE_Townhouse\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROPERTY_CRIME\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.488726512394985,\n        \"min\": 40.8,\n        \"max\": 78.2,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          64.4,\n          67.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VIOLENT_CRIME\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.252661434013023,\n        \"min\": 29.4,\n        \"max\": 70.2,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          49.7,\n          53.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YEAR\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2022,\n          2024\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MONTH\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          1,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HOUSE AGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.753836919306266,\n        \"min\": -2.0,\n        \"max\": 446.0,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          71.0,\n          60.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Future possibility incorporating the median price data as a feature"
      ],
      "metadata": {
        "id": "INf33EUpSja2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "df_time = pd.read_csv('/content/sample_data/zipcode_saleprice.csv')\n",
        "df_time = df_time.drop(['RegionID', 'SizeRank', 'RegionType', 'StateName', 'State', 'City', 'Metro', 'CountyName'], axis = 1)\n",
        "df_time = df_time.rename(columns = {'RegionName': 'ZIP OR POSTAL CODE'})\n",
        "df_time.head(5)\n",
        "\n",
        "\n",
        "temp_27703 = df_time.loc[0, '2001-02-01':]\n",
        "temp_27713 = df_time.loc[1, '2001-02-01':]\n",
        "temp_27707 = df_time.loc[2, '2001-02-01':]\n",
        "temp_27705 = df_time.loc[3, '2001-02-01':]\n",
        "temp_27704 = df_time.loc[4, '2001-02-01':]\n",
        "temp_27701 = df_time.loc[5, '2001-02-01':]\n",
        "temp_27712 = df_time.loc[6, '2001-02-01':]\n",
        "temp_27503 = df_time.loc[7, '2001-02-01':]\n",
        "\n",
        "\n",
        "map_27703 = {temp_27703.keys: temp_27703.values}\n",
        "map_27713 = {temp_27713.keys: temp_27713.values}\n",
        "map_27707 = {temp_27707.keys: temp_27707.values}\n",
        "map_27705 = {temp_27705.keys: temp_27705.values}\n",
        "map_27704 = {temp_27704.keys: temp_27704.values}\n",
        "map_27701 = {temp_27701.keys: temp_27701.values}\n",
        "map_27712 = {temp_27712.keys: temp_27712.values}\n",
        "map_27503 = {temp_27503.keys: temp_27503.values}\n"
      ],
      "metadata": {
        "id": "3jyLhm8-3wR-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 400
        },
        "outputId": "e593485f-23d1-4903-bd90-593ff9d5e7b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/content/sample_data/zipcode_saleprice.csv'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-143-24303ad2c91b>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/sample_data/zipcode_saleprice.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mdf_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_time\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'RegionID'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SizeRank'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'RegionType'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'StateName'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'State'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'City'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Metro'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CountyName'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_time\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'RegionName'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'ZIP OR POSTAL CODE'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/sample_data/zipcode_saleprice.csv'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Simple Linear Regression Model**"
      ],
      "metadata": {
        "id": "6v0pcUWvYE4R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Train_X, Test_X, Train_y, Test_y = train_test_split(df.drop('PRICE', axis=1), df['PRICE'], test_size=0.2, random_state=42)\n",
        "\n",
        "Train_X = Train_X.reset_index(drop=True)\n",
        "Test_X = Test_X.reset_index(drop=True)\n",
        "Train_y = Train_y.reset_index(drop=True)\n",
        "Test_y = Test_y.reset_index(drop=True)"
      ],
      "metadata": {
        "id": "JOHOzUa45biP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "outputId": "ac9d2a56-06a2-4326-afba-bbe0ce53c603"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'train_test_split' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-910ba9e28639>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mTrain_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTest_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTrain_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTest_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'PRICE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'PRICE'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mTrain_X\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTrain_X\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mTest_X\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTest_X\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mTrain_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTrain_y\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'train_test_split' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Make some verifications\n",
        "print(Train_X.shape, Train_y.shape)\n",
        "print(Test_X.shape, Test_y.shape)\n",
        "\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 747
        },
        "id": "TC4SFQAU70Kt",
        "outputId": "814f5c87-ce5f-4d05-a737-0aaf24e7f2b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(14310, 19) (14310,)\n",
            "(3578, 19) (3578,)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PRICE                                      0\n",
              "BEDS                                       0\n",
              "BATHS                                      0\n",
              "SQUARE FEET                                0\n",
              "LOT SIZE                                   0\n",
              "YEAR BUILT                                 0\n",
              "LATITUDE                                   0\n",
              "LONGITUDE                                  0\n",
              "PROPERTY TYPE_Condo/Co-op                  0\n",
              "PROPERTY TYPE_Mobile/Manufactured Home     0\n",
              "PROPERTY TYPE_Multi-Family (2-4 Unit)      0\n",
              "PROPERTY TYPE_Multi-Family (5+ Unit)       0\n",
              "PROPERTY TYPE_Ranch                        0\n",
              "PROPERTY TYPE_Single Family Residential    0\n",
              "PROPERTY TYPE_Townhouse                    0\n",
              "PROPERTY_CRIME                             0\n",
              "VIOLENT_CRIME                              0\n",
              "YEAR                                       0\n",
              "MONTH                                      0\n",
              "HOUSE AGE                                  0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PRICE</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BEDS</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BATHS</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SQUARE FEET</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LOT SIZE</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>YEAR BUILT</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LATITUDE</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LONGITUDE</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PROPERTY TYPE_Condo/Co-op</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PROPERTY TYPE_Mobile/Manufactured Home</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PROPERTY TYPE_Multi-Family (2-4 Unit)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PROPERTY TYPE_Multi-Family (5+ Unit)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PROPERTY TYPE_Ranch</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PROPERTY TYPE_Single Family Residential</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PROPERTY TYPE_Townhouse</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PROPERTY_CRIME</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VIOLENT_CRIME</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>YEAR</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MONTH</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HOUSE AGE</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import preprocessing, svm\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import root_mean_squared_error, mean_squared_error, mean_absolute_error, r2_score as r2\n",
        "\n",
        "\n",
        "model = LinearRegression().fit(Train_X, Train_y)\n",
        "predictions = model.predict(Test_X)\n",
        "\n",
        "\n",
        "rmse_loss = root_mean_squared_error(predictions, Test_y)\n",
        "mse_loss = mean_squared_error(predictions, Test_y)\n",
        "mae_loss = mean_absolute_error(predictions, Test_y)\n",
        "r2_loss = r2(predictions, Test_y)\n",
        "\n",
        "print('RMSE:', rmse_loss)\n",
        "print('MSE:', mse_loss)\n",
        "print('MAE:', mae_loss)\n",
        "print('R2:', r2_loss)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NIJ4BSOc7_7U",
        "outputId": "e6bd1f47-3360-4a13-8561-861056473929"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 103040.22057453287\n",
            "MSE: 10617287056.048386\n",
            "MAE: 69831.67441344625\n",
            "R2: 0.49325976221002366\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Making K-Folds (K = 10)"
      ],
      "metadata": {
        "id": "014Xuyp6V4L3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import KFold\n",
        "kf = KFold(n_splits = 10, shuffle = True, random_state = 42) #consider putting shuffle to true, but rn we also want to consider time"
      ],
      "metadata": {
        "id": "ACw5qQuWWS9u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.linear_model import LinearRegression\n",
        "model = LinearRegression()\n",
        "#fit using model, which is the linear regression model!!!\n",
        "\n",
        "scores_r2 = cross_val_score(model, Train_X, Train_y, cv=kf, scoring='r2')\n",
        "scores_mse = cross_val_score(model, Train_X, Train_y, cv=kf, scoring='neg_mean_squared_error')\n",
        "scores_mae = cross_val_score(model, Train_X, Train_y, cv=kf, scoring='neg_mean_absolute_error')\n",
        "scores_rmse = cross_val_score(model, Train_X, Train_y, cv=kf, scoring='neg_root_mean_squared_error')\n",
        "\n",
        "print('RMSE:', scores_rmse.mean())\n",
        "print('MSE:', scores_mse.mean())\n",
        "print('MAE:', scores_mae.mean())\n",
        "print('R2:', scores_r2.mean())"
      ],
      "metadata": {
        "id": "r_m2nz83bQSP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c0f9fb0-719a-40b4-9283-bbd5a8c6cbfc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: -1178521.6060256357\n",
            "MSE: -9650186481365.45\n",
            "MAE: -96669.0950630219\n",
            "R2: -341.67133293285747\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Test_X.head(5)\n",
        "#Train_y.head(5)\n",
        "\n",
        "#Test_X.head(5)\n",
        "#Test_y.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "zNdeXxXm-R6b",
        "outputId": "143830ef-aa62-4644-ca82-36ebb5bf411c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   BEDS  BATHS  SQUARE FEET  LOT SIZE  YEAR BUILT  $/SQUARE FEET   LATITUDE  \\\n",
              "0   3.0    2.5       2473.0   27573.0      1978.0          160.0  36.086412   \n",
              "1   4.0    2.5       3126.0   35283.0      1976.0          188.0  36.080821   \n",
              "2   4.0    2.5       3403.0   42688.0      1989.0          100.0  36.175086   \n",
              "3   3.0    2.0       1641.0   25264.0      1984.0          146.0  35.973400   \n",
              "4   4.0    2.5       2382.0   12196.0      1988.0          151.0  35.880361   \n",
              "\n",
              "   LONGITUDE  PROPERTY_CRIME  VIOLENT_CRIME  YEAR  MONTH  HOUSE AGE  \n",
              "0 -78.949777            40.8           29.4  2021      7       43.0  \n",
              "1 -78.966296            40.8           29.4  2023      6       47.0  \n",
              "2 -78.897961            46.2           36.9  2021      2       32.0  \n",
              "3 -78.783636            64.4           49.7  2024      2       40.0  \n",
              "4 -78.924799            58.3           39.5  2020      7       32.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8659f9e9-51d3-44c9-aba7-efd2ef3cf258\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BEDS</th>\n",
              "      <th>BATHS</th>\n",
              "      <th>SQUARE FEET</th>\n",
              "      <th>LOT SIZE</th>\n",
              "      <th>YEAR BUILT</th>\n",
              "      <th>$/SQUARE FEET</th>\n",
              "      <th>LATITUDE</th>\n",
              "      <th>LONGITUDE</th>\n",
              "      <th>PROPERTY_CRIME</th>\n",
              "      <th>VIOLENT_CRIME</th>\n",
              "      <th>YEAR</th>\n",
              "      <th>MONTH</th>\n",
              "      <th>HOUSE AGE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2473.0</td>\n",
              "      <td>27573.0</td>\n",
              "      <td>1978.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>36.086412</td>\n",
              "      <td>-78.949777</td>\n",
              "      <td>40.8</td>\n",
              "      <td>29.4</td>\n",
              "      <td>2021</td>\n",
              "      <td>7</td>\n",
              "      <td>43.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3126.0</td>\n",
              "      <td>35283.0</td>\n",
              "      <td>1976.0</td>\n",
              "      <td>188.0</td>\n",
              "      <td>36.080821</td>\n",
              "      <td>-78.966296</td>\n",
              "      <td>40.8</td>\n",
              "      <td>29.4</td>\n",
              "      <td>2023</td>\n",
              "      <td>6</td>\n",
              "      <td>47.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3403.0</td>\n",
              "      <td>42688.0</td>\n",
              "      <td>1989.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>36.175086</td>\n",
              "      <td>-78.897961</td>\n",
              "      <td>46.2</td>\n",
              "      <td>36.9</td>\n",
              "      <td>2021</td>\n",
              "      <td>2</td>\n",
              "      <td>32.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1641.0</td>\n",
              "      <td>25264.0</td>\n",
              "      <td>1984.0</td>\n",
              "      <td>146.0</td>\n",
              "      <td>35.973400</td>\n",
              "      <td>-78.783636</td>\n",
              "      <td>64.4</td>\n",
              "      <td>49.7</td>\n",
              "      <td>2024</td>\n",
              "      <td>2</td>\n",
              "      <td>40.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2382.0</td>\n",
              "      <td>12196.0</td>\n",
              "      <td>1988.0</td>\n",
              "      <td>151.0</td>\n",
              "      <td>35.880361</td>\n",
              "      <td>-78.924799</td>\n",
              "      <td>58.3</td>\n",
              "      <td>39.5</td>\n",
              "      <td>2020</td>\n",
              "      <td>7</td>\n",
              "      <td>32.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8659f9e9-51d3-44c9-aba7-efd2ef3cf258')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8659f9e9-51d3-44c9-aba7-efd2ef3cf258 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8659f9e9-51d3-44c9-aba7-efd2ef3cf258');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-dd7758dc-4014-4ae2-9373-ce16f8af19d2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dd7758dc-4014-4ae2-9373-ce16f8af19d2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-dd7758dc-4014-4ae2-9373-ce16f8af19d2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"#Test_y\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"BEDS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5477225575051661,\n        \"min\": 3.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BATHS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22360679774997896,\n        \"min\": 2.0,\n        \"max\": 2.5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.0,\n          2.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SQUARE FEET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 690.0532588141295,\n        \"min\": 1641.0,\n        \"max\": 3403.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3126.0,\n          2382.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LOT SIZE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11449.989855890703,\n        \"min\": 12196.0,\n        \"max\": 42688.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          35283.0,\n          12196.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YEAR BUILT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.830951894845301,\n        \"min\": 1976.0,\n        \"max\": 1989.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1976.0,\n          1988.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"$/SQUARE FEET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.843366656181317,\n        \"min\": 100.0,\n        \"max\": 188.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          188.0,\n          151.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LATITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11400188698175913,\n        \"min\": 35.8803612,\n        \"max\": 36.1750861,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          36.0808207,\n          35.8803612\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LONGITUDE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07233895324010056,\n        \"min\": -78.966296,\n        \"max\": -78.7836359,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -78.966296,\n          -78.9247994\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROPERTY_CRIME\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.722872749408157,\n        \"min\": 40.8,\n        \"max\": 64.4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          46.2,\n          58.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VIOLENT_CRIME\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.412312405040604,\n        \"min\": 29.4,\n        \"max\": 49.7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          36.9,\n          39.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YEAR\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2023,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MONTH\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          7,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HOUSE AGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.685805860178712,\n        \"min\": 32.0,\n        \"max\": 47.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          47.0,\n          40.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**XGBoost Model**"
      ],
      "metadata": {
        "id": "6QLr8poe3KpG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBRegressor\n",
        "from sklearn.metrics import max_error\n",
        "\n",
        "#Try a default model first\n",
        "model = XGBRegressor(random_state=42, n_jobs=-1, n_estimators=1000, max_depth=3, learning_rate=0.1)\n",
        "\n",
        "model.fit(Train_X, Train_y)\n",
        "preds = model.predict(Test_X)\n",
        "\n",
        "\n",
        "rmse_loss = root_mean_squared_error(preds, Test_y)\n",
        "mse_loss = mean_squared_error(preds, Test_y)\n",
        "mae_loss = mean_absolute_error(preds, Test_y)\n",
        "r2_loss = r2(preds, Test_y)\n",
        "max = max_error(preds, Test_y)\n",
        "\n",
        "\n",
        "print('RMSE:', rmse_loss)\n",
        "print('MSE:', mse_loss)\n",
        "print('MAE:', mae_loss)\n",
        "print('R2:', r2_loss)\n",
        "print('Max Error:', max)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hnNi9sh79EpH",
        "outputId": "0caf8a5b-683f-4775-97a2-397a3567b4df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 70068.0426775377\n",
            "MSE: 4909530604.661243\n",
            "MAE: 40851.30245816448\n",
            "R2: 0.8122794048686255\n",
            "Max Error: 876573.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tune Hyperparameters (RandomSearch)"
      ],
      "metadata": {
        "id": "iv82tKolVCW4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "\n",
        "param_grid = {'max_depth': [1,2,3,4,5,6], 'learning_rate': [0.1, 0.15, 0.2, 0.25, 0.3], 'n_estimators': np.arange(100, 1000, 25), 'reg_lambda': [1, 2, 3, 4, 5]}\n",
        "\n",
        "model = XGBRegressor()\n",
        "\n",
        "grid = RandomizedSearchCV(model, param_grid,scoring='neg_mean_absolute_percentage_error', cv=8, n_iter = 50)\n",
        "grid.fit(Train_X, Train_y)\n",
        "\n",
        "print(grid.best_params_)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "jXfxJUaGVEky",
        "outputId": "887f7858-d131-4d32-e025-a8a9cfd73661"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'np' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-6fa5bbc2adbe>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mRandomizedSearchCV\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mparam_grid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'max_depth'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'learning_rate'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.25\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'n_estimators'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m25\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'reg_lambda'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mXGBRegressor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'np' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_percentage_error\n",
        "model_2 = XGBRegressor(random_state=42, n_jobs=-1, n_estimators=975, max_depth=6, learning_rate=0.15, reg_lambda = 4)\n",
        "\n",
        "model_2.fit(Train_X, Train_y)\n",
        "preds = model_2.predict(Test_X)\n",
        "\n",
        "#print some metrics\n",
        "print(\"mean absolute error:\" + mean_absolute_error(preds, Test_y))\n",
        "print(\"mean absolute percentage error:\" + mean_absolute_percentage_error(preds, Test_y))\n",
        "print(Test_y.shape)\n",
        "print(\"\\n\")\n",
        "\n",
        "#get the percentage errors of the houses\n",
        "error = abs(preds - Test_y)/Test_y * 100\n",
        "\n",
        "max = error.argmax()\n",
        "\n",
        "\n",
        "#print the entries with the most error\n",
        "print(len(error))\n",
        "for i in range(0, 1050):\n",
        "  error = np.delete(error, max)\n",
        "  max = error.argmax()\n",
        "  print(error[max])\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R55hT_q4epfa",
        "outputId": "d84ed318-aaf1-4da9-d3c5-de39872f2d7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "36307.66795128214\n",
            "0.08817982891807043\n",
            "(3578,)\n",
            "\n",
            "\n",
            "3578\n",
            "120.20592500000001\n",
            "118.63097499999999\n",
            "105.0766244493392\n",
            "102.32397959183675\n",
            "102.26092803030302\n",
            "97.21227272727273\n",
            "96.81356823979593\n",
            "93.2971875\n",
            "85.53034274193548\n",
            "85.37403935185185\n",
            "82.71019886363636\n",
            "80.7798875\n",
            "80.1928515625\n",
            "77.61464990601505\n",
            "77.55496710526316\n",
            "76.09908333333333\n",
            "74.36954861111111\n",
            "73.23207386363636\n",
            "72.83481435643564\n",
            "70.2069140625\n",
            "69.28668442928469\n",
            "69.22636968085106\n",
            "68.29840561224489\n",
            "67.06133304195804\n",
            "66.25903776978417\n",
            "65.67118951612903\n",
            "63.96502232142856\n",
            "63.87734375\n",
            "63.10497472426471\n",
            "62.26360714285715\n",
            "60.76240853658537\n",
            "60.473973214285714\n",
            "59.97958620689655\n",
            "59.7351125\n",
            "59.57393333333333\n",
            "59.22383802816902\n",
            "58.81991666666667\n",
            "58.6984375\n",
            "58.430800000000005\n",
            "58.10519120065789\n",
            "58.10032915360501\n",
            "57.958220108695656\n",
            "57.947013567174054\n",
            "57.85676923076923\n",
            "57.85676923076923\n",
            "57.348553571428575\n",
            "56.8742329149233\n",
            "56.81048103932584\n",
            "55.69630514705882\n",
            "55.27582525643254\n",
            "54.479908854166666\n",
            "54.177677664974624\n",
            "53.67594999999999\n",
            "53.37221467391304\n",
            "52.735600649350644\n",
            "51.169732142857136\n",
            "51.10280172413793\n",
            "50.46071250000001\n",
            "50.439047619047614\n",
            "50.24316371681415\n",
            "50.21561842105263\n",
            "49.7662962962963\n",
            "49.57363689095128\n",
            "49.14735433266932\n",
            "48.42563684834123\n",
            "48.26803571428571\n",
            "47.42481496710526\n",
            "46.58240178571428\n",
            "46.529017857142854\n",
            "45.247389999999996\n",
            "45.16282649253731\n",
            "45.014309210526314\n",
            "44.87213930348259\n",
            "44.787043103448276\n",
            "44.69485677083333\n",
            "44.507773919753085\n",
            "44.1301875\n",
            "43.96370817843866\n",
            "43.71182692307693\n",
            "43.56126358695652\n",
            "43.55065476190476\n",
            "43.46157957269068\n",
            "43.035389610389615\n",
            "42.96309322033898\n",
            "42.95301684881603\n",
            "42.754821428571425\n",
            "42.670719537815124\n",
            "42.43769048338413\n",
            "42.1780427631579\n",
            "42.17539592760181\n",
            "41.85759308510638\n",
            "41.78442013888889\n",
            "41.75567722371968\n",
            "41.57845370370371\n",
            "41.547968216723554\n",
            "41.53573113207547\n",
            "41.28828125\n",
            "41.12012295081967\n",
            "41.0269\n",
            "40.553315\n",
            "40.049288649645305\n",
            "39.97319542253521\n",
            "39.78488782051282\n",
            "39.52002188880849\n",
            "39.34429521276596\n",
            "39.309853045325774\n",
            "39.24268895348837\n",
            "39.097258064516126\n",
            "39.0478768382353\n",
            "38.59239889705882\n",
            "38.52379716981132\n",
            "38.32929956896552\n",
            "38.203759191176474\n",
            "38.19580560836502\n",
            "37.99054908002858\n",
            "37.868950749464666\n",
            "37.82692708333333\n",
            "37.56524739583333\n",
            "37.4055011549526\n",
            "37.280805619266054\n",
            "37.20032196969697\n",
            "36.8811875\n",
            "36.8811875\n",
            "36.63612682500728\n",
            "36.60017277644231\n",
            "36.39496010638298\n",
            "36.27701108531196\n",
            "36.25728078358209\n",
            "36.18167\n",
            "36.09749489795918\n",
            "36.0503095518868\n",
            "35.92643028846154\n",
            "35.88116935483871\n",
            "35.614393382352944\n",
            "35.034125816993466\n",
            "34.98164772727273\n",
            "34.753212890625\n",
            "34.741465909090905\n",
            "34.28453571428571\n",
            "34.23099264705882\n",
            "34.22140625\n",
            "34.20532910628019\n",
            "34.10752118644068\n",
            "34.05522492375466\n",
            "33.95358455882353\n",
            "33.94991319444444\n",
            "33.79076107357357\n",
            "33.745561889250816\n",
            "33.677409420289855\n",
            "33.601155821917814\n",
            "33.52966923076923\n",
            "33.44666158536585\n",
            "33.240896739130434\n",
            "33.07490416666667\n",
            "32.983478773584906\n",
            "32.92617559523809\n",
            "32.92021634615384\n",
            "32.90720833333333\n",
            "32.526614583333334\n",
            "32.5207953163017\n",
            "32.19864919354839\n",
            "31.968194444444443\n",
            "31.8665\n",
            "31.776565669371198\n",
            "31.689813508064518\n",
            "31.591746987951808\n",
            "31.521282258064513\n",
            "31.448131944444448\n",
            "31.250379075056863\n",
            "31.20310096153846\n",
            "31.04909659090909\n",
            "31.015390625\n",
            "30.937618750000002\n",
            "30.91724826388889\n",
            "30.739426523297492\n",
            "30.728876306620208\n",
            "30.716021341463414\n",
            "30.588675556125395\n",
            "30.51132042253521\n",
            "30.449052601809957\n",
            "30.393715753424654\n",
            "30.132328345070427\n",
            "30.079090277777777\n",
            "30.0359875\n",
            "29.977316176470588\n",
            "29.922477528089885\n",
            "29.8791750672043\n",
            "29.61461354961832\n",
            "29.606828431372552\n",
            "29.587999201277952\n",
            "29.458999515503876\n",
            "29.439788918104227\n",
            "29.288549214975845\n",
            "29.281584448160537\n",
            "29.26872422680412\n",
            "29.261345720720723\n",
            "29.231752411575563\n",
            "29.229158950617283\n",
            "29.213770325203253\n",
            "29.169495192307693\n",
            "29.1605274321267\n",
            "28.962998575498577\n",
            "28.803779927075794\n",
            "28.76342987804878\n",
            "28.704146634615384\n",
            "28.67575819672131\n",
            "28.625242579908676\n",
            "28.440778795811518\n",
            "28.434340890008396\n",
            "28.41121376811594\n",
            "28.383117647058825\n",
            "28.34159027777778\n",
            "28.309581939799333\n",
            "28.276842105263157\n",
            "28.171142418032787\n",
            "28.090335365853658\n",
            "28.07768382352941\n",
            "28.02437106918239\n",
            "27.9854936770428\n",
            "27.815744318181817\n",
            "27.729287941787945\n",
            "27.69625273522976\n",
            "27.692233263598325\n",
            "27.692091049382718\n",
            "27.613816964285714\n",
            "27.531130573248408\n",
            "27.494909090909093\n",
            "27.399742647058822\n",
            "27.314031862745097\n",
            "27.292399425287357\n",
            "27.055642857142857\n",
            "27.042290900735296\n",
            "27.01059482758621\n",
            "26.998621031746033\n",
            "26.98255979498861\n",
            "26.92543202764977\n",
            "26.83188596491228\n",
            "26.830734223300972\n",
            "26.824076978764477\n",
            "26.798458333333336\n",
            "26.752900449101798\n",
            "26.674464285714283\n",
            "26.657065470643055\n",
            "26.54664262820513\n",
            "26.54264367816092\n",
            "26.47801455301455\n",
            "26.452475490196075\n",
            "26.37388572386059\n",
            "26.298046874999997\n",
            "25.875464527027027\n",
            "25.732853535353534\n",
            "25.720252659574466\n",
            "25.660002090301003\n",
            "25.628341049382712\n",
            "25.496279411764704\n",
            "25.494978323699424\n",
            "25.36581683168317\n",
            "25.301504237288135\n",
            "25.281583333333334\n",
            "25.258105468749996\n",
            "25.06544375\n",
            "24.83207514044944\n",
            "24.7564293598234\n",
            "24.74454308712121\n",
            "24.65053917253521\n",
            "24.617998866213153\n",
            "24.57190806878307\n",
            "24.48265625\n",
            "24.473854166666666\n",
            "24.4009375\n",
            "24.39772451456311\n",
            "24.316480263157896\n",
            "24.31238888888889\n",
            "24.278227272727275\n",
            "24.207023026315788\n",
            "24.185569556451615\n",
            "24.139298986486487\n",
            "24.10073489010989\n",
            "24.088249417927823\n",
            "24.06454861111111\n",
            "23.995473484848485\n",
            "23.958967803030305\n",
            "23.90243544600939\n",
            "23.825658783783783\n",
            "23.731025\n",
            "23.731025\n",
            "23.711427083333334\n",
            "23.682620192307695\n",
            "23.616776315789473\n",
            "23.492968750000003\n",
            "23.44828125\n",
            "23.231605\n",
            "23.227484567901236\n",
            "23.15778125\n",
            "23.156957547169814\n",
            "22.85536274509804\n",
            "22.779236963190183\n",
            "22.670140796703297\n",
            "22.657100694444445\n",
            "22.65119103773585\n",
            "22.644858757062146\n",
            "22.64315277777778\n",
            "22.628603908668733\n",
            "22.57373922413793\n",
            "22.483718825645695\n",
            "22.454393745427943\n",
            "22.430973684210525\n",
            "22.347087962962963\n",
            "22.33621208158996\n",
            "22.323784246575343\n",
            "22.25492261904762\n",
            "22.2015368852459\n",
            "22.19842060810811\n",
            "22.13658945221445\n",
            "21.907693326271186\n",
            "21.864800000000002\n",
            "21.864800000000002\n",
            "21.8478125\n",
            "21.847182017543858\n",
            "21.799065420560748\n",
            "21.71239620736086\n",
            "21.69291666666667\n",
            "21.64933522387586\n",
            "21.64337837837838\n",
            "21.584002016129034\n",
            "21.54169741697417\n",
            "21.520513668430336\n",
            "21.51814375436148\n",
            "21.501308333333334\n",
            "21.47725\n",
            "21.46142834793492\n",
            "21.429574092741934\n",
            "21.38014563106796\n",
            "21.37511607142857\n",
            "21.360203313253013\n",
            "21.341649159663866\n",
            "21.29685096153846\n",
            "21.295842013888887\n",
            "21.26815017772512\n",
            "21.24622467771639\n",
            "21.216994680851066\n",
            "21.200729166666665\n",
            "21.093463541666665\n",
            "21.052422086720867\n",
            "21.036971100663717\n",
            "21.003584039548024\n",
            "20.921890194489464\n",
            "20.908295454545456\n",
            "20.869930555555555\n",
            "20.860355885311872\n",
            "20.8353271484375\n",
            "20.824486301369863\n",
            "20.793045212765957\n",
            "20.789446721311474\n",
            "20.779742647058825\n",
            "20.75860922877222\n",
            "20.746054964539006\n",
            "20.67349972345133\n",
            "20.619330357142857\n",
            "20.592137096774195\n",
            "20.546909303800557\n",
            "20.295425925925926\n",
            "20.290889550264552\n",
            "20.275616617413046\n",
            "20.26136890951276\n",
            "20.25840517241379\n",
            "20.251046875\n",
            "20.227463737201365\n",
            "20.22089638157895\n",
            "20.219145833333332\n",
            "20.215397058823527\n",
            "20.203168434057446\n",
            "20.197645089285714\n",
            "20.1620625\n",
            "20.09655769230769\n",
            "20.09655769230769\n",
            "20.077479698375868\n",
            "20.03972953216374\n",
            "20.031668632075473\n",
            "20.011855332167833\n",
            "20.00575168918919\n",
            "19.923488372093022\n",
            "19.912621753246754\n",
            "19.903670839917346\n",
            "19.721772058823532\n",
            "19.721754807692307\n",
            "19.67096875\n",
            "19.653083881578947\n",
            "19.651655982905982\n",
            "19.613847402597404\n",
            "19.603860828488372\n",
            "19.59674479166667\n",
            "19.596594551282053\n",
            "19.585309709821427\n",
            "19.49431368670886\n",
            "19.47426605504587\n",
            "19.452133620689654\n",
            "19.326270161290324\n",
            "19.3075\n",
            "19.29654255319149\n",
            "19.295230532786885\n",
            "19.286610878661087\n",
            "19.282190860215053\n",
            "19.281123907195695\n",
            "19.276595982142858\n",
            "19.25282608695652\n",
            "19.220340909090908\n",
            "19.202434210526313\n",
            "19.15231433054393\n",
            "19.143389705882353\n",
            "19.13943993356708\n",
            "19.035779411764704\n",
            "19.032233146067416\n",
            "19.020926517571883\n",
            "19.0085172344823\n",
            "19.00709544879899\n",
            "19.00148689516129\n",
            "18.955768425460636\n",
            "18.94548828125\n",
            "18.922783714504476\n",
            "18.849029411764707\n",
            "18.81820054945055\n",
            "18.796083515283843\n",
            "18.77337962962963\n",
            "18.747005837359097\n",
            "18.74318493150685\n",
            "18.724990862573097\n",
            "18.69081611570248\n",
            "18.676896551724138\n",
            "18.67639024390244\n",
            "18.655167410714284\n",
            "18.644615384615385\n",
            "18.64181919642857\n",
            "18.605725\n",
            "18.60210048010974\n",
            "18.5932421875\n",
            "18.577591765873017\n",
            "18.570678438661712\n",
            "18.57018442622951\n",
            "18.540355\n",
            "18.490866935483872\n",
            "18.490364733602615\n",
            "18.48564692982456\n",
            "18.47382530120482\n",
            "18.436732142857142\n",
            "18.42631793478261\n",
            "18.415543831168833\n",
            "18.301050724637683\n",
            "18.294990384615385\n",
            "18.28661111111111\n",
            "18.266945652173913\n",
            "18.226988572075133\n",
            "18.207708333333333\n",
            "18.186689189189188\n",
            "18.184938524590162\n",
            "18.18101728723404\n",
            "18.151285714285713\n",
            "18.150970611641657\n",
            "18.13767628205128\n",
            "18.038375327225133\n",
            "17.995921875\n",
            "17.99470034246575\n",
            "17.975027412280703\n",
            "17.968930555555556\n",
            "17.960397727272728\n",
            "17.956492346938777\n",
            "17.950574324324325\n",
            "17.939944444444443\n",
            "17.937675957207208\n",
            "17.93083088235294\n",
            "17.91573717948718\n",
            "17.914964200477325\n",
            "17.831767045454548\n",
            "17.823697033898306\n",
            "17.81580303030303\n",
            "17.803953804347827\n",
            "17.79433695652174\n",
            "17.788270833333332\n",
            "17.782827034883724\n",
            "17.760396825396825\n",
            "17.75626358695652\n",
            "17.747000217770033\n",
            "17.73542962674961\n",
            "17.734958996023856\n",
            "17.70927660422479\n",
            "17.685981206293704\n",
            "17.64279807692308\n",
            "17.640922379032258\n",
            "17.627343749999998\n",
            "17.61953869047619\n",
            "17.522670454545455\n",
            "17.516806640625\n",
            "17.513973519362185\n",
            "17.468642578125\n",
            "17.453370921305183\n",
            "17.450334044583858\n",
            "17.40329761904762\n",
            "17.300148108508402\n",
            "17.29435307017544\n",
            "17.284701646090536\n",
            "17.284598214285715\n",
            "17.262704741379313\n",
            "17.261197916666667\n",
            "17.260821220930232\n",
            "17.23830681818182\n",
            "17.171406249999997\n",
            "17.146200358315916\n",
            "17.068035954301074\n",
            "17.03834621535181\n",
            "17.021875\n",
            "17.016828981164384\n",
            "17.007580357142857\n",
            "16.980321112204724\n",
            "16.900414062499998\n",
            "16.895096830985914\n",
            "16.895096830985914\n",
            "16.89390120967742\n",
            "16.877265625\n",
            "16.868727678571428\n",
            "16.84808552631579\n",
            "16.831270161290323\n",
            "16.817518606296517\n",
            "16.810640432098765\n",
            "16.80322368421053\n",
            "16.762095588235294\n",
            "16.72932399960769\n",
            "16.704609375\n",
            "16.691845238095237\n",
            "16.673743872549018\n",
            "16.63288819286757\n",
            "16.618930288461538\n",
            "16.51393691588785\n",
            "16.474696048632218\n",
            "16.413770833333334\n",
            "16.41355882352941\n",
            "16.394588032581453\n",
            "16.390508177570094\n",
            "16.3888846920892\n",
            "16.3776614010989\n",
            "16.358404933481154\n",
            "16.33986581920904\n",
            "16.322599085365855\n",
            "16.274623397435896\n",
            "16.26300847457627\n",
            "16.18030303030303\n",
            "16.174698572834643\n",
            "16.170135542168676\n",
            "16.158916015625\n",
            "16.151890923566878\n",
            "16.151694915254236\n",
            "16.09982158304498\n",
            "16.081901468721135\n",
            "16.060590277777777\n",
            "16.041946721311476\n",
            "16.038671875\n",
            "16.032836595492288\n",
            "16.021060026978418\n",
            "16.01198501872659\n",
            "16.01056891025641\n",
            "16.003692307692308\n",
            "15.99642565359477\n",
            "15.924039017341041\n",
            "15.894065533980584\n",
            "15.889402573529413\n",
            "15.879992816904595\n",
            "15.875693181818182\n",
            "15.865448113207547\n",
            "15.807228773584905\n",
            "15.79141089428793\n",
            "15.78929586038961\n",
            "15.783888157894738\n",
            "15.743528846153845\n",
            "15.714065682281058\n",
            "15.674427083333335\n",
            "15.669167258522727\n",
            "15.665289634146342\n",
            "15.651171875\n",
            "15.650053353658535\n",
            "15.642549342105264\n",
            "15.642447916666665\n",
            "15.579878007569615\n",
            "15.557616959064328\n",
            "15.50401860367893\n",
            "15.483098404255319\n",
            "15.467086397058823\n",
            "15.463666666666667\n",
            "15.462310606060607\n",
            "15.438460743801652\n",
            "15.433405511811024\n",
            "15.409841160220994\n",
            "15.403427083333332\n",
            "15.398241279069769\n",
            "15.362287234042554\n",
            "15.337333984375\n",
            "15.318107876712329\n",
            "15.282630208333334\n",
            "15.219026785714284\n",
            "15.212876139436785\n",
            "15.17250816993464\n",
            "15.14292197688204\n",
            "15.132240657216494\n",
            "15.12453488372093\n",
            "15.057486719787516\n",
            "15.0351026119403\n",
            "15.024696072319202\n",
            "15.022737068965517\n",
            "15.020495283018867\n",
            "15.010182724252491\n",
            "14.996326388888889\n",
            "14.994564144736842\n",
            "14.985701710261571\n",
            "14.967500000000001\n",
            "14.964802083333334\n",
            "14.963420245398773\n",
            "14.95843201754386\n",
            "14.948215909090909\n",
            "14.91406929347826\n",
            "14.896206563706563\n",
            "14.891096938017878\n",
            "14.874421875\n",
            "14.867895161290324\n",
            "14.862386461937716\n",
            "14.84815366972477\n",
            "14.833686926605505\n",
            "14.819931318681318\n",
            "14.759118470149254\n",
            "14.744897151898734\n",
            "14.697441465256796\n",
            "14.696977611940298\n",
            "14.67609068627451\n",
            "14.64478813559322\n",
            "14.617539682539682\n",
            "14.605873786407766\n",
            "14.602158018867925\n",
            "14.569247572815533\n",
            "14.557729007633588\n",
            "14.554682692307692\n",
            "14.519418103448276\n",
            "14.515762711864408\n",
            "14.505116033755275\n",
            "14.50177162072032\n",
            "14.498018867924529\n",
            "14.497486969471332\n",
            "14.494411268134066\n",
            "14.474603873239436\n",
            "14.470473790322579\n",
            "14.461761363636363\n",
            "14.444235436893205\n",
            "14.408635670731707\n",
            "14.35179435483871\n",
            "14.304199475065618\n",
            "14.285498366013073\n",
            "14.270604838709676\n",
            "14.261017441860465\n",
            "14.234859317343174\n",
            "14.222345297029705\n",
            "14.215375\n",
            "14.20644117647059\n",
            "14.199578125\n",
            "14.185294642857144\n",
            "14.16094916044776\n",
            "14.133891666666667\n",
            "14.118771739130434\n",
            "14.065964285714285\n",
            "14.050543478260868\n",
            "14.04080105633803\n",
            "14.035802083333335\n",
            "14.026473637440759\n",
            "14.018798701298701\n",
            "13.980445296864577\n",
            "13.930027173913043\n",
            "13.89777050395257\n",
            "13.88850885581081\n",
            "13.853694158075601\n",
            "13.840474397590361\n",
            "13.839392857142856\n",
            "13.817273985239853\n",
            "13.81260045924225\n",
            "13.80830357142857\n",
            "13.791523766546328\n",
            "13.75930937766986\n",
            "13.757071865443423\n",
            "13.756818181818181\n",
            "13.749914772727273\n",
            "13.74938998287671\n",
            "13.748608630952381\n",
            "13.748392857142857\n",
            "13.731569444444444\n",
            "13.720369791666668\n",
            "13.680449218749999\n",
            "13.679289772727273\n",
            "13.679088114754098\n",
            "13.61855143721634\n",
            "13.609211956521738\n",
            "13.57730068897638\n",
            "13.576828170028818\n",
            "13.563014481707317\n",
            "13.5589375\n",
            "13.547579491439382\n",
            "13.5453373015873\n",
            "13.527697475570033\n",
            "13.507539893617022\n",
            "13.47649193548387\n",
            "13.4590625\n",
            "13.436169354838709\n",
            "13.426398437500001\n",
            "13.425211948757582\n",
            "13.409489678899083\n",
            "13.392607421874999\n",
            "13.38981359649123\n",
            "13.38111111111111\n",
            "13.365921610169492\n",
            "13.360108024691359\n",
            "13.355209790209791\n",
            "13.354849137931035\n",
            "13.351072443181819\n",
            "13.340715909090909\n",
            "13.339896812957159\n",
            "13.335757575757576\n",
            "13.329886363636364\n",
            "13.304928482587064\n",
            "13.302421278625953\n",
            "13.288602502979737\n",
            "13.277358490566037\n",
            "13.271630859375\n",
            "13.242881944444445\n",
            "13.214090909090908\n",
            "13.201336633663367\n",
            "13.182976804123712\n",
            "13.14255771718579\n",
            "13.125412103007436\n",
            "13.122721096837944\n",
            "13.119186282467531\n",
            "13.088347778036297\n",
            "13.083392602229354\n",
            "13.078693790149892\n",
            "13.077490079365079\n",
            "13.068232142857141\n",
            "13.053421874999998\n",
            "13.048691406249999\n",
            "13.04592772933882\n",
            "13.023096590909091\n",
            "13.014465361445785\n",
            "13.01244103773585\n",
            "12.993831073113208\n",
            "12.966407035175878\n",
            "12.965125\n",
            "12.963766447368421\n",
            "12.963020833333333\n",
            "12.953349693635113\n",
            "12.952384868421053\n",
            "12.951676829268294\n",
            "12.931926020408163\n",
            "12.898741319444445\n",
            "12.89338856949611\n",
            "12.885416666666666\n",
            "12.866751269035534\n",
            "12.836105769230768\n",
            "12.803683333333332\n",
            "12.7911365658363\n",
            "12.773781249999999\n",
            "12.758\n",
            "12.753527397260275\n",
            "12.740990384615383\n",
            "12.737541666666665\n",
            "12.732103433624124\n",
            "12.7084375\n",
            "12.687362611428032\n",
            "12.672876059322032\n",
            "12.662491319444444\n",
            "12.657862622036262\n",
            "12.654459709965124\n",
            "12.64231707317073\n",
            "12.634875000000001\n",
            "12.62999362094662\n",
            "12.624272698209719\n",
            "12.60615625\n",
            "12.598896409652738\n",
            "12.58836090021692\n",
            "12.580431985294119\n",
            "12.56750932835821\n",
            "12.56750932835821\n",
            "12.542537313432836\n",
            "12.542264610389612\n",
            "12.52365918803419\n",
            "12.519565669160432\n",
            "12.48891791044776\n",
            "12.485807966321245\n",
            "12.484895833333333\n",
            "12.472703488372092\n",
            "12.471747967479676\n",
            "12.468235294117648\n",
            "12.467118898395013\n",
            "12.439688351498637\n",
            "12.430028409090909\n",
            "12.413538602941177\n",
            "12.406032508149062\n",
            "12.399869207772795\n",
            "12.39241185897436\n",
            "12.380464285714286\n",
            "12.36502840909091\n",
            "12.3606171875\n",
            "12.360604838709676\n",
            "12.360604838709676\n",
            "12.3596875\n",
            "12.354012883008357\n",
            "12.348836390876137\n",
            "12.309647565922921\n",
            "12.27734375\n",
            "12.27571052631579\n",
            "12.249834843337108\n",
            "12.248942307692309\n",
            "12.237268032942339\n",
            "12.235154109589041\n",
            "12.219284638554218\n",
            "12.218930288461538\n",
            "12.211043510324483\n",
            "12.185719696969697\n",
            "12.170803571428571\n",
            "12.170398284313725\n",
            "12.168451699542091\n",
            "12.149721345433024\n",
            "12.116385892012316\n",
            "12.109646739130435\n",
            "12.109307065217392\n",
            "12.086575520833334\n",
            "12.083231225296442\n",
            "12.064379770992366\n",
            "12.063607859531771\n",
            "12.049458661417322\n",
            "12.036218227505557\n",
            "12.034136904761905\n",
            "12.02875\n",
            "12.013022813688213\n",
            "12.010427135678391\n",
            "11.96619318181818\n",
            "11.945566176470589\n",
            "11.939960317460317\n",
            "11.912566964285714\n",
            "11.882160493827161\n",
            "11.871338383838385\n",
            "11.8378125\n",
            "11.83471590909091\n",
            "11.800482673267327\n",
            "11.790033586448597\n",
            "11.783729742944956\n",
            "11.778765003750937\n",
            "11.775692386068915\n",
            "11.775535694837727\n",
            "11.764985795454546\n",
            "11.742412823855304\n",
            "11.741999658469945\n",
            "11.721356007067138\n",
            "11.720529477772597\n",
            "11.717475728155339\n",
            "11.712474662162162\n",
            "11.697629310344828\n",
            "11.671472039473684\n",
            "11.642398897058824\n",
            "11.6348625\n",
            "11.62981543624161\n",
            "11.604426433915211\n",
            "11.60217474489796\n",
            "11.601916540785497\n",
            "11.600255681818181\n",
            "11.592109441151567\n",
            "11.582934782608696\n",
            "11.553015202702703\n",
            "11.550944444444443\n",
            "11.545941455696203\n",
            "11.536666666666667\n",
            "11.531258928571429\n",
            "11.526559278350515\n",
            "11.52603696388262\n",
            "11.491595873786407\n",
            "11.483392857142857\n",
            "11.457277510983959\n",
            "11.45579613095238\n",
            "11.4530625\n",
            "11.43500892857143\n",
            "11.434205357142858\n",
            "11.416991666666666\n",
            "11.415844594594594\n",
            "11.407758928571429\n",
            "11.399174913005655\n",
            "11.382166280864197\n",
            "11.36515625\n",
            "11.361438679245282\n",
            "11.340798319327732\n",
            "11.33732476635514\n",
            "11.333507751937985\n",
            "11.33064484126984\n",
            "11.317012746710526\n",
            "11.315681034482758\n",
            "11.314183823529412\n",
            "11.303911340522568\n",
            "11.302680412371133\n",
            "11.299769021739131\n",
            "11.291673920612814\n",
            "11.282899560117302\n",
            "11.272144456886899\n",
            "11.268466569767442\n",
            "11.26588125\n",
            "11.264193842686954\n",
            "11.247473958333334\n",
            "11.24235\n",
            "11.235602678571428\n",
            "11.215753205128205\n",
            "11.192076290035587\n",
            "11.180725730442978\n",
            "11.177072580645161\n",
            "11.170865384615384\n",
            "11.165239626515827\n",
            "11.145825892857143\n",
            "11.143333333333333\n",
            "11.136564371257485\n",
            "11.121669117647059\n",
            "11.116690140845071\n",
            "11.102022756005058\n",
            "11.092399193548387\n",
            "11.074042338709678\n",
            "11.030587686567165\n",
            "11.027634803921568\n",
            "10.991785714285713\n",
            "10.988912601626016\n",
            "10.988412990196078\n",
            "10.982026209677418\n",
            "10.979747983870967\n",
            "10.97891081871345\n",
            "10.958703883735371\n",
            "10.953036277602523\n",
            "10.947433510638298\n",
            "10.938757911392404\n",
            "10.9216015625\n",
            "10.91591478696742\n",
            "10.91482617586912\n",
            "10.910709876543208\n",
            "10.903344594594595\n",
            "10.903164772727273\n",
            "10.89142156862745\n",
            "10.877648904597233\n",
            "10.877337740384615\n",
            "10.866022614314115\n",
            "10.862803368003963\n",
            "10.855173076923078\n",
            "10.855173076923078\n",
            "10.843494318181818\n",
            "10.829549625605637\n",
            "10.817991071428573\n",
            "10.817090069284065\n",
            "10.807935674269707\n",
            "10.804447480833442\n",
            "10.803018867924528\n",
            "10.799330357142857\n",
            "10.796435185185185\n",
            "10.792975116892807\n",
            "10.791061643835615\n",
            "10.790616343490305\n",
            "10.7819\n",
            "10.781735074626866\n",
            "10.766584011529332\n",
            "10.765956257684712\n",
            "10.750211538461539\n",
            "10.73706329401089\n",
            "10.705224358974359\n",
            "10.699481707317073\n",
            "10.686033950617285\n",
            "10.679591346153847\n",
            "10.676773255813954\n",
            "10.671310483870968\n",
            "10.667040021127153\n",
            "10.666736111111112\n",
            "10.645691638327666\n",
            "10.641571691176472\n",
            "10.63028744871937\n",
            "10.619477611940297\n",
            "10.617837837837838\n",
            "10.614063048880446\n",
            "10.57869006849315\n",
            "10.5775390625\n",
            "10.573870967741936\n",
            "10.562565298507463\n",
            "10.561168154761905\n",
            "10.532785714285714\n",
            "10.514912887168142\n",
            "10.505660683391003\n",
            "10.49173931413888\n",
            "10.486473214285715\n",
            "10.484285714285715\n",
            "10.47861111111111\n",
            "10.472926201372998\n",
            "10.457066413282657\n",
            "10.431851798143851\n",
            "10.41982234689107\n",
            "10.419359939759037\n",
            "10.418175\n",
            "10.387946428571428\n",
            "10.38792824074074\n",
            "10.37775335008375\n",
            "10.362651909397028\n",
            "10.36234693877551\n",
            "10.355319148936172\n",
            "10.33000096098948\n",
            "10.315411764705882\n",
            "10.314441964285715\n",
            "10.307675\n",
            "10.304813311688312\n",
            "10.299254082914572\n",
            "10.285603260869564\n",
            "10.271941489361701\n",
            "10.268155487804878\n",
            "10.254622054973822\n",
            "10.25302\n",
            "10.251472249112616\n",
            "10.248101851851851\n",
            "10.247181818181819\n",
            "10.246543367346938\n",
            "10.241810533216784\n",
            "10.237669868791002\n",
            "10.235851818682832\n",
            "10.230429805239973\n",
            "10.217587719298246\n",
            "10.217447916666666\n",
            "10.212536873156342\n",
            "10.211752577319588\n",
            "10.207213747184365\n",
            "10.205776785714285\n",
            "10.202477678571428\n",
            "10.188078125\n",
            "10.177204003407155\n",
            "10.148799019607843\n",
            "10.135726516634051\n",
            "10.13387784090909\n",
            "10.130552551903115\n",
            "10.127936872909698\n",
            "10.126421097285068\n",
            "10.1245\n",
            "10.124256700167503\n",
            "10.122228618421053\n",
            "10.108393895348836\n",
            "10.10691199376947\n",
            "10.100632061492869\n",
            "10.098456439393939\n",
            "10.07996831797235\n",
            "10.06672794117647\n",
            "10.06672256097561\n",
            "10.065299131016042\n",
            "10.060621675531916\n",
            "10.056075\n",
            "10.054099834070797\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Pickle to save model"
      ],
      "metadata": {
        "id": "x6oWIRgbQnFa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "full_path = '/content/sample_data.pkl'\n",
        "\n",
        "with open(full_path, 'wb') as file:\n",
        "  pickle.dump(model_2, file)"
      ],
      "metadata": {
        "id": "PpuNv17dQoNz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Get most important features"
      ],
      "metadata": {
        "id": "KyThyfEzgdJZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#get the most important features\n",
        "map = {}\n",
        "columns = Train_X.columns.to_numpy()\n",
        "for i in range(len(columns)):\n",
        "  map[columns[i]] = model_2.feature_importances_[i]\n",
        "print(map)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6NFmfklTgfIe",
        "outputId": "21073853-f143-47ce-8373-40b273688d59"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'BEDS': np.float32(0.013437764), 'BATHS': np.float32(0.027387707), 'SQUARE FEET': np.float32(0.25400752), 'LOT SIZE': np.float32(0.021613585), 'YEAR BUILT': np.float32(0.033225317), 'LATITUDE': np.float32(0.030272003), 'LONGITUDE': np.float32(0.046142716), 'PROPERTY TYPE_Condo/Co-op': np.float32(0.0008762755), 'PROPERTY TYPE_Mobile/Manufactured Home': np.float32(0.030165693), 'PROPERTY TYPE_Multi-Family (2-4 Unit)': np.float32(0.018388346), 'PROPERTY TYPE_Multi-Family (5+ Unit)': np.float32(0.0), 'PROPERTY TYPE_Ranch': np.float32(0.003510211), 'PROPERTY TYPE_Single Family Residential': np.float32(0.15336192), 'PROPERTY TYPE_Townhouse': np.float32(0.13113779), 'PROPERTY_CRIME': np.float32(0.0815488), 'VIOLENT_CRIME': np.float32(0.0), 'YEAR': np.float32(0.123608716), 'MONTH': np.float32(0.011345505), 'HOUSE AGE': np.float32(0.019970156)}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Extra predictions for house on market right now"
      ],
      "metadata": {
        "id": "EtSPV__4Qiw4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Cleaning Data\n",
        "on_sale = pd.read_csv('/content/sample_data/Durham_County (2).csv')\n",
        "on_sale = on_sale.drop(columns = ['$/SQUARE FEET','PROPERTY TYPE', 'LOCATION', 'HOA/MONTH', 'DAYS ON MARKET', 'SOLD DATE', 'SALE TYPE', 'ADDRESS', 'CITY', 'STATE OR PROVINCE', 'STATUS', 'NEXT OPEN HOUSE START TIME', 'NEXT OPEN HOUSE END TIME', 'URL (SEE https://www.redfin.com/buy-a-home/comparative-market-analysis FOR INFO ON PRICING)', 'SOURCE', 'MLS#', 'FAVORITE', 'INTERESTED'])\n",
        "on_sale = on_sale.dropna(subset = ['YEAR BUILT', 'BEDS', 'BATHS', 'LOT SIZE', 'SQUARE FEET'])\n",
        "on_sale.head(5)\n",
        "\n",
        "#Actual Listing Prices\n",
        "test_current = on_sale['PRICE']\n",
        "on_sale = on_sale.drop(columns = ['PRICE'])\n",
        "\n",
        "#Feature extract again\n",
        "on_sale['PROPERTY_CRIME'] = on_sale['ZIP OR POSTAL CODE'].map(pc)\n",
        "on_sale['VIOLENT_CRIME'] = on_sale['ZIP OR POSTAL CODE'].map(vc)\n",
        "on_sale = on_sale.drop(columns = ['ZIP OR POSTAL CODE'])\n",
        "\n",
        "on_sale['YEAR'] = 2025\n",
        "on_sale['MONTH'] = 5\n",
        "on_sale['HOUSE AGE'] = on_sale['YEAR'] - on_sale['YEAR BUILT']\n",
        "\n",
        "\n",
        "#getting predictions of on sale houses\n",
        "#ans = model_2.predict(on_sale)\n",
        "\n",
        "#calculating errors of predictions\n",
        "error = (abs(ans - test_current)/test_current)\n",
        "\n",
        "#get the thirty entries with the most error\n",
        "max = error.argmax()\n",
        "for i in range(0, len(error)-1):\n",
        "  error = np.delete(error, max)\n",
        "  max = error.argmax()\n",
        "  print(error[max])\n",
        "print(\"\\n\")\n",
        "\n",
        "\n",
        "#print the worst predictions\n",
        "for i in range(0, len(columns)):\n",
        "  map[columns[i]] = model_2.feature_importances_[i]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "VfmDClHYjLsV",
        "outputId": "e865a952-d4ea-4fde-8d3c-cc1559f941d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/content/sample_data/Durham_County (2).csv'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-20-247822296d5c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Cleaning Data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mon_sale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/sample_data/Durham_County (2).csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mon_sale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mon_sale\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'$/SQUARE FEET'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'PROPERTY TYPE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'LOCATION'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'HOA/MONTH'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'DAYS ON MARKET'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SOLD DATE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SALE TYPE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ADDRESS'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CITY'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'STATE OR PROVINCE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'STATUS'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'NEXT OPEN HOUSE START TIME'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'NEXT OPEN HOUSE END TIME'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'URL (SEE https://www.redfin.com/buy-a-home/comparative-market-analysis FOR INFO ON PRICING)'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SOURCE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MLS#'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'FAVORITE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'INTERESTED'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mon_sale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mon_sale\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'YEAR BUILT'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'BEDS'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'BATHS'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'LOT SIZE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SQUARE FEET'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mon_sale\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/sample_data/Durham_County (2).csv'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Mean Absolute Error (MAE): 36307.66795128214\")\n",
        "print(\"Mean Absolute Percentage Error: 8.817982891807043\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0D3qTEDjUWKK",
        "outputId": "c5ac59d3-045c-4d2f-d3e4-4e5940d64f7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Absolute Error (MAE): 36307.66795128214\n",
            "Mean Absolute Percentage Error: 8.817982891807043\n"
          ]
        }
      ]
    }
  ]
}